
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 09 23:47:04 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 09 23:47:04 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\013\000\002\002" +
    "\013\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\015" +
    "\015\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\011\000\002\004\011\000\002\004\010\000\002\004\010" +
    "\000\002\004\005\000\002\004\005\000\002\006\011\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\013\007\000\002\007" +
    "\015\000\002\010\011\000\002\011\013\000\002\012\011" +
    "\000\002\014\012\000\002\014\011\000\002\005\005\000" +
    "\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\022\006\014\007\017\010\011\011\006\014" +
    "\005\015\021\030\013\040\022\001\002\000\032\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\030" +
    "\ufff6\032\ufff6\033\ufff6\036\ufff6\040\ufff6\001\002\000\004" +
    "\030\237\001\002\000\004\030\225\001\002\000\030\002" +
    "\ufffe\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\030\ufff3\032\ufff3\040\ufff3\001\002\000\032\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\030\ufffc\032\ufffc\033\ufffc\036\ufffc\040\ufffc\001\002\000" +
    "\004\040\206\001\002\000\004\002\205\001\002\000\004" +
    "\010\174\001\002\000\006\026\157\040\160\001\002\000" +
    "\032\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\030\ufff8\032\ufff8\033\ufff8\036\ufff8\040\ufff8\001" +
    "\002\000\032\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\030\ufffa\032\ufffa\033\ufffa\036\ufffa\040" +
    "\ufffa\001\002\000\006\026\142\040\143\001\002\000\026" +
    "\006\014\007\017\010\011\011\006\013\076\014\005\015" +
    "\021\030\013\032\114\040\022\001\002\000\004\030\026" +
    "\001\002\000\004\040\023\001\002\000\006\023\024\040" +
    "\025\001\002\000\034\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\030\uffe0\032\uffe0\033" +
    "\uffe0\036\uffe0\040\uffe0\001\002\000\034\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\030" +
    "\uffe1\032\uffe1\033\uffe1\036\uffe1\040\uffe1\001\002\000\006" +
    "\006\030\040\031\001\002\000\004\031\067\001\002\000" +
    "\004\040\060\001\002\000\004\016\032\001\002\000\004" +
    "\041\033\001\002\000\004\037\034\001\002\000\006\027" +
    "\036\040\037\001\002\000\004\037\050\001\002\000\006" +
    "\031\uffde\037\uffde\001\002\000\004\024\040\001\002\000" +
    "\012\005\042\027\043\040\044\041\041\001\002\000\006" +
    "\031\uffdc\037\uffdc\001\002\000\006\005\045\040\046\001" +
    "\002\000\006\031\uffdd\037\uffdd\001\002\000\006\031\uffdb" +
    "\037\uffdb\001\002\000\006\031\uffda\037\uffda\001\002\000" +
    "\004\005\047\001\002\000\006\031\uffd9\037\uffd9\001\002" +
    "\000\006\026\053\040\052\001\002\000\004\031\uffd3\001" +
    "\002\000\006\025\055\026\056\001\002\000\004\040\054" +
    "\001\002\000\004\031\uffd0\001\002\000\004\041\057\001" +
    "\002\000\004\031\uffd1\001\002\000\004\031\uffd2\001\002" +
    "\000\004\016\061\001\002\000\004\041\062\001\002\000" +
    "\004\037\063\001\002\000\006\027\036\040\037\001\002" +
    "\000\004\037\065\001\002\000\006\026\053\040\052\001" +
    "\002\000\004\031\uffd4\001\002\000\004\032\070\001\002" +
    "\000\022\006\014\007\017\010\011\011\006\014\005\015" +
    "\021\030\013\040\022\001\002\000\032\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\030\ufff3\032" +
    "\ufff3\033\ufff3\036\ufff3\040\ufff3\001\002\000\026\006\014" +
    "\007\017\010\011\011\006\013\076\014\005\015\021\030" +
    "\013\033\101\040\022\001\002\000\032\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\036\ufff7\040\ufff7\001\002\000\032\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\030" +
    "\ufff4\032\ufff4\033\ufff4\036\ufff4\040\ufff4\001\002\000\032" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\030\ufffd\032\ufffd\033\ufffd\036\ufffd\040\ufffd\001\002" +
    "\000\004\032\104\001\002\000\032\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\030\ufff9\032\ufff9" +
    "\033\ufff9\036\ufff9\040\ufff9\001\002\000\032\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\030\ufffb" +
    "\032\ufffb\033\ufffb\036\ufffb\040\ufffb\001\002\000\034\002" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\030\uffd5\032\uffd5\033\uffd5\036\uffd5\040\uffd5\001" +
    "\002\000\004\013\076\001\002\000\032\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\030\ufff5\032" +
    "\ufff5\033\ufff5\036\ufff5\040\ufff5\001\002\000\022\006\014" +
    "\007\017\010\011\011\006\014\005\015\021\030\013\040" +
    "\022\001\002\000\026\006\014\007\017\010\011\011\006" +
    "\013\076\014\005\015\021\030\013\033\106\040\022\001" +
    "\002\000\004\014\107\001\002\000\004\030\110\001\002" +
    "\000\006\027\036\040\037\001\002\000\004\031\112\001" +
    "\002\000\004\037\113\001\002\000\032\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\036\uffd6\040\uffd6\001\002\000\022\006\014" +
    "\007\017\010\011\011\006\014\005\015\021\030\013\040" +
    "\022\001\002\000\026\006\014\007\017\010\011\011\006" +
    "\013\076\014\005\015\021\030\013\036\116\040\022\001" +
    "\002\000\022\006\014\007\017\010\011\011\006\014\005" +
    "\015\021\030\013\040\022\001\002\000\026\006\014\007" +
    "\017\010\011\011\006\013\076\014\005\015\021\030\013" +
    "\032\120\040\022\001\002\000\006\015\021\040\123\001" +
    "\002\000\004\033\140\001\002\000\004\033\136\001\002" +
    "\000\004\043\124\001\002\000\004\040\125\001\002\000" +
    "\004\043\126\001\002\000\004\040\127\001\002\000\004" +
    "\030\130\001\002\000\004\005\131\001\002\000\014\006" +
    "\014\007\017\010\011\030\013\040\022\001\002\000\004" +
    "\005\133\001\002\000\004\031\134\001\002\000\004\037" +
    "\135\001\002\000\004\033\ufff2\001\002\000\004\033\137" +
    "\001\002\000\004\002\000\001\002\000\004\033\141\001" +
    "\002\000\004\002\uffff\001\002\000\004\040\155\001\002" +
    "\000\012\016\147\025\144\026\146\037\145\001\002\000" +
    "\004\041\153\001\002\000\034\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\030\ufff1\032" +
    "\ufff1\033\ufff1\036\ufff1\040\ufff1\001\002\000\004\037\152" +
    "\001\002\000\004\041\150\001\002\000\004\037\151\001" +
    "\002\000\034\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\014\uffef\015\uffef\030\uffef\032\uffef\033\uffef\036" +
    "\uffef\040\uffef\001\002\000\034\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\013\uffee\014\uffee\015\uffee\030\uffee\032" +
    "\uffee\033\uffee\036\uffee\040\uffee\001\002\000\004\037\154" +
    "\001\002\000\034\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\036\ufff0\040\ufff0\001\002\000\004\037\156\001\002\000" +
    "\034\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\030\uffed\032\uffed\033\uffed\036\uffed\040" +
    "\uffed\001\002\000\004\040\172\001\002\000\012\016\164" +
    "\025\161\026\163\037\162\001\002\000\004\041\170\001" +
    "\002\000\034\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\013\uffec\014\uffec\015\uffec\030\uffec\032\uffec\033\uffec\036" +
    "\uffec\040\uffec\001\002\000\004\037\167\001\002\000\004" +
    "\041\165\001\002\000\004\037\166\001\002\000\034\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea" +
    "\015\uffea\030\uffea\032\uffea\033\uffea\036\uffea\040\uffea\001" +
    "\002\000\034\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\030\uffe9\032\uffe9\033\uffe9\036" +
    "\uffe9\040\uffe9\001\002\000\004\037\171\001\002\000\034" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\030\uffeb\032\uffeb\033\uffeb\036\uffeb\040\uffeb" +
    "\001\002\000\004\037\173\001\002\000\034\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\036\uffe8\040\uffe8\001\002\000" +
    "\006\034\175\040\176\001\002\000\004\035\202\001\002" +
    "\000\004\034\177\001\002\000\004\035\200\001\002\000" +
    "\004\031\201\001\002\000\034\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\036\uffe2\040\uffe2\001\002\000\004\040\203" +
    "\001\002\000\004\031\204\001\002\000\034\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\036\uffe3\040\uffe3\001\002\000" +
    "\004\002\001\001\002\000\006\016\210\025\207\001\002" +
    "\000\004\005\217\001\002\000\004\005\211\001\002\000" +
    "\006\005\212\040\213\001\002\000\004\037\216\001\002" +
    "\000\004\005\214\001\002\000\004\037\215\001\002\000" +
    "\034\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\030\uffe4\032\uffe4\033\uffe4\036\uffe4\040" +
    "\uffe4\001\002\000\034\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\036\uffe6\040\uffe6\001\002\000\006\005\220\040\221" +
    "\001\002\000\004\037\224\001\002\000\004\005\222\001" +
    "\002\000\004\037\223\001\002\000\034\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\036\uffe5\040\uffe5\001\002\000\034" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\030\uffe7\032\uffe7\033\uffe7\036\uffe7\040\uffe7" +
    "\001\002\000\006\027\036\040\037\001\002\000\004\031" +
    "\227\001\002\000\004\032\230\001\002\000\022\006\014" +
    "\007\017\010\011\011\006\014\005\015\021\030\013\040" +
    "\022\001\002\000\026\006\014\007\017\010\011\011\006" +
    "\013\076\014\005\015\021\030\013\033\232\040\022\001" +
    "\002\000\034\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\233" +
    "\013\uffdf\014\uffdf\015\uffdf\030\uffdf\032\uffdf\033\uffdf\036" +
    "\uffdf\040\uffdf\001\002\000\004\032\234\001\002\000\022" +
    "\006\014\007\017\010\011\011\006\014\005\015\021\030" +
    "\013\040\022\001\002\000\026\006\014\007\017\010\011" +
    "\011\006\013\076\014\005\015\021\030\013\033\236\040" +
    "\022\001\002\000\032\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\030\uffd8\032\uffd8\033\uffd8\036" +
    "\uffd8\040\uffd8\001\002\000\006\027\036\040\037\001\002" +
    "\000\004\031\241\001\002\000\004\032\242\001\002\000" +
    "\022\006\014\007\017\010\011\011\006\014\005\015\021" +
    "\030\013\040\022\001\002\000\026\006\014\007\017\010" +
    "\011\011\006\013\076\014\005\015\021\030\013\033\244" +
    "\040\022\001\002\000\032\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\036\uffd7\040\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\020\002\011\003\017\004\007\006\015\007" +
    "\014\010\003\012\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\074\006\077\007\076\010\072" +
    "\011\101\012\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\063\001\001\000\002" +
    "\001\001\000\004\005\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\071\004\007\006\015\007\014" +
    "\010\003\012\070\001\001\000\002\001\001\000\016\004" +
    "\074\006\077\007\076\010\072\011\101\012\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\102\001\001\000\002\001\001\000" +
    "\016\003\104\004\007\006\015\007\014\010\003\012\070" +
    "\001\001\000\016\004\074\006\077\007\076\010\072\011" +
    "\101\012\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\114\004\007\006\015" +
    "\007\014\010\003\012\070\001\001\000\016\004\074\006" +
    "\077\007\076\010\072\011\101\012\073\001\001\000\016" +
    "\003\116\004\007\006\015\007\014\010\003\012\070\001" +
    "\001\000\016\004\074\006\077\007\076\010\072\011\101" +
    "\012\073\001\001\000\006\012\120\015\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\230\004\007\006\015\007\014\010\003" +
    "\012\070\001\001\000\016\004\074\006\077\007\076\010" +
    "\072\011\101\012\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\234\004\007\006\015\007\014\010" +
    "\003\012\070\001\001\000\016\004\074\006\077\007\076" +
    "\010\072\011\101\012\073\001\001\000\002\001\001\000" +
    "\004\013\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\242\004\007\006\015\007\014\010\003\012" +
    "\070\001\001\000\016\004\074\006\077\007\076\010\072" +
    "\011\101\012\073\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Identificador Identificador Op_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Parentesis_a Cadena Identificador Corchete_a Corchete_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Parentesis_a Cadena Corchete_a Corchete_c Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SOUT_V ::= Identificador P_punto Identificador P_punto Identificador Parentesis_a Comillas DECLARACION Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SOUT_V",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA Llave_a SENTENCIA Main SENTENCIA Llave_a FOR Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA Llave_a SENTENCIA Main SENTENCIA Llave_a SOUT_V Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

